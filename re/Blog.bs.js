// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Post$ReactTemplate = require("./Post.bs.js");

function str(prim) {
  return prim;
}

function Blog(Props) {
  var posts = Props.posts;
  var renderPosts = $$Array.map((function (post) {
          return React.createElement(Post$ReactTemplate.make, {
                      post: post,
                      key: post.id
                    });
        }), posts);
  return React.createElement("div", undefined, React.createElement("h1", undefined, "Blog"), renderPosts);
}

var ppx_printed_query = "query AllMarkdownRemark  {\nallMarkdownRemark  {\nedges  {\nnode  {\ntableOfContents(pathToSlugField: \"frontmatter.path\")  \nfrontmatter  {\npath  \ntitle  \ndate  \n}\n\nid  \nexcerpt  \n}\n\n}\n\n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "allMarkdownRemark");
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeObject(Caml_option.valFromOption(match$1));
      if (match$2 !== undefined) {
        var match$3 = Js_dict.get(Caml_option.valFromOption(match$2), "edges");
        var tmp$1;
        if (match$3 !== undefined) {
          var value$1 = Caml_option.valFromOption(match$3);
          var match$4 = Js_json.decodeArray(value$1);
          tmp$1 = match$4 !== undefined ? match$4.map((function (value) {
                    var match = Js_json.decodeObject(value);
                    if (match !== undefined) {
                      var match$1 = Js_dict.get(Caml_option.valFromOption(match), "node");
                      var tmp;
                      if (match$1 !== undefined) {
                        var match$2 = Js_json.decodeObject(Caml_option.valFromOption(match$1));
                        if (match$2 !== undefined) {
                          var value$1 = Caml_option.valFromOption(match$2);
                          var match$3 = Js_dict.get(value$1, "tableOfContents");
                          var tmp$1;
                          if (match$3 !== undefined) {
                            var value$2 = Caml_option.valFromOption(match$3);
                            var match$4 = Js_json.decodeNull(value$2);
                            if (match$4 !== undefined) {
                              tmp$1 = undefined;
                            } else {
                              var match$5 = Js_json.decodeString(value$2);
                              tmp$1 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                            }
                          } else {
                            tmp$1 = undefined;
                          }
                          var match$6 = Js_dict.get(value$1, "frontmatter");
                          var tmp$2;
                          if (match$6 !== undefined) {
                            var value$3 = Caml_option.valFromOption(match$6);
                            var match$7 = Js_json.decodeNull(value$3);
                            if (match$7 !== undefined) {
                              tmp$2 = undefined;
                            } else {
                              var match$8 = Js_json.decodeObject(value$3);
                              var tmp$3;
                              if (match$8 !== undefined) {
                                var value$4 = Caml_option.valFromOption(match$8);
                                var match$9 = Js_dict.get(value$4, "path");
                                var tmp$4;
                                if (match$9 !== undefined) {
                                  var value$5 = Caml_option.valFromOption(match$9);
                                  var match$10 = Js_json.decodeNull(value$5);
                                  if (match$10 !== undefined) {
                                    tmp$4 = undefined;
                                  } else {
                                    var match$11 = Js_json.decodeString(value$5);
                                    tmp$4 = match$11 !== undefined ? match$11 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
                                  }
                                } else {
                                  tmp$4 = undefined;
                                }
                                var match$12 = Js_dict.get(value$4, "title");
                                var tmp$5;
                                if (match$12 !== undefined) {
                                  var value$6 = Caml_option.valFromOption(match$12);
                                  var match$13 = Js_json.decodeNull(value$6);
                                  if (match$13 !== undefined) {
                                    tmp$5 = undefined;
                                  } else {
                                    var match$14 = Js_json.decodeString(value$6);
                                    tmp$5 = match$14 !== undefined ? match$14 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
                                  }
                                } else {
                                  tmp$5 = undefined;
                                }
                                var match$15 = Js_dict.get(value$4, "date");
                                var tmp$6;
                                if (match$15 !== undefined) {
                                  var value$7 = Caml_option.valFromOption(match$15);
                                  var match$16 = Js_json.decodeNull(value$7);
                                  tmp$6 = match$16 !== undefined ? undefined : Caml_option.some(value$7);
                                } else {
                                  tmp$6 = undefined;
                                }
                                tmp$3 = {
                                  path: tmp$4,
                                  title: tmp$5,
                                  date: tmp$6
                                };
                              } else {
                                tmp$3 = Js_exn.raiseError("graphql_ppx: Object is not a value");
                              }
                              tmp$2 = Caml_option.some(tmp$3);
                            }
                          } else {
                            tmp$2 = undefined;
                          }
                          var match$17 = Js_dict.get(value$1, "id");
                          var tmp$7;
                          if (match$17 !== undefined) {
                            var value$8 = Caml_option.valFromOption(match$17);
                            var match$18 = Js_json.decodeString(value$8);
                            tmp$7 = match$18 !== undefined ? match$18 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
                          } else {
                            tmp$7 = Js_exn.raiseError("graphql_ppx: Field id on type MarkdownRemark is missing");
                          }
                          var match$19 = Js_dict.get(value$1, "excerpt");
                          var tmp$8;
                          if (match$19 !== undefined) {
                            var value$9 = Caml_option.valFromOption(match$19);
                            var match$20 = Js_json.decodeNull(value$9);
                            if (match$20 !== undefined) {
                              tmp$8 = undefined;
                            } else {
                              var match$21 = Js_json.decodeString(value$9);
                              tmp$8 = match$21 !== undefined ? match$21 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$9));
                            }
                          } else {
                            tmp$8 = undefined;
                          }
                          tmp = {
                            tableOfContents: tmp$1,
                            frontmatter: tmp$2,
                            id: tmp$7,
                            excerpt: tmp$8
                          };
                        } else {
                          tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                        }
                      } else {
                        tmp = Js_exn.raiseError("graphql_ppx: Field node on type MarkdownRemarkEdge is missing");
                      }
                      return {
                              node: tmp
                            };
                    } else {
                      return Js_exn.raiseError("graphql_ppx: Object is not a value");
                    }
                  })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$1));
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Field edges on type MarkdownRemarkConnection is missing");
        }
        tmp = {
          edges: tmp$1
        };
      } else {
        tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
      }
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field allMarkdownRemark on type Query is missing");
    }
    return {
            allMarkdownRemark: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var BlogQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

var make$1 = Blog;

var $$default = Blog;

exports.str = str;
exports.make = make$1;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
exports.BlogQuery = BlogQuery;
/* react Not a pure module */
